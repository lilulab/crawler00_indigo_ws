// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RemoteService.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RemoteService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protos {

void protobuf_ShutdownFile_RemoteService_2eproto() {
  delete RemoteService::default_instance_;
  delete CalibrateEncoders::default_instance_;
  delete CalibrateCurrent::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_RemoteService_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_RemoteService_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  RemoteService::default_instance_ = new RemoteService();
  CalibrateEncoders::default_instance_ = new CalibrateEncoders();
  CalibrateCurrent::default_instance_ = new CalibrateCurrent();
  RemoteService::default_instance_->InitAsDefaultInstance();
  CalibrateEncoders::default_instance_->InitAsDefaultInstance();
  CalibrateCurrent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RemoteService_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_RemoteService_2eproto_once_);
void protobuf_AddDesc_RemoteService_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_RemoteService_2eproto_once_,
                 &protobuf_AddDesc_RemoteService_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RemoteService_2eproto {
  StaticDescriptorInitializer_RemoteService_2eproto() {
    protobuf_AddDesc_RemoteService_2eproto();
  }
} static_descriptor_initializer_RemoteService_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int RemoteService::kCalibrateEncodersFieldNumber;
const int RemoteService::kCalibrateCurrentFieldNumber;
#endif  // !_MSC_VER

RemoteService::RemoteService()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RemoteService::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  calibrateencoders_ = const_cast< ::protos::CalibrateEncoders*>(
      ::protos::CalibrateEncoders::internal_default_instance());
#else
  calibrateencoders_ = const_cast< ::protos::CalibrateEncoders*>(&::protos::CalibrateEncoders::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  calibratecurrent_ = const_cast< ::protos::CalibrateCurrent*>(
      ::protos::CalibrateCurrent::internal_default_instance());
#else
  calibratecurrent_ = const_cast< ::protos::CalibrateCurrent*>(&::protos::CalibrateCurrent::default_instance());
#endif
}

RemoteService::RemoteService(const RemoteService& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteService::SharedCtor() {
  _cached_size_ = 0;
  calibrateencoders_ = NULL;
  calibratecurrent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteService::~RemoteService() {
  SharedDtor();
}

void RemoteService::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete calibrateencoders_;
    delete calibratecurrent_;
  }
}

void RemoteService::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoteService& RemoteService::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RemoteService_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RemoteService_2eproto();
#endif
  return *default_instance_;
}

RemoteService* RemoteService::default_instance_ = NULL;

RemoteService* RemoteService::New() const {
  return new RemoteService;
}

void RemoteService::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_calibrateencoders()) {
      if (calibrateencoders_ != NULL) calibrateencoders_->::protos::CalibrateEncoders::Clear();
    }
    if (has_calibratecurrent()) {
      if (calibratecurrent_ != NULL) calibratecurrent_->::protos::CalibrateCurrent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RemoteService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protos.CalibrateEncoders calibrateEncoders = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibrateencoders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_calibrateCurrent;
        break;
      }

      // optional .protos.CalibrateCurrent calibrateCurrent = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calibrateCurrent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibratecurrent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protos.CalibrateEncoders calibrateEncoders = 10;
  if (has_calibrateencoders()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->calibrateencoders(), output);
  }

  // optional .protos.CalibrateCurrent calibrateCurrent = 11;
  if (has_calibratecurrent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->calibratecurrent(), output);
  }

}

int RemoteService::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protos.CalibrateEncoders calibrateEncoders = 10;
    if (has_calibrateencoders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calibrateencoders());
    }

    // optional .protos.CalibrateCurrent calibrateCurrent = 11;
    if (has_calibratecurrent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calibratecurrent());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteService::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoteService*>(&from));
}

void RemoteService::MergeFrom(const RemoteService& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_calibrateencoders()) {
      mutable_calibrateencoders()->::protos::CalibrateEncoders::MergeFrom(from.calibrateencoders());
    }
    if (from.has_calibratecurrent()) {
      mutable_calibratecurrent()->::protos::CalibrateCurrent::MergeFrom(from.calibratecurrent());
    }
  }
}

void RemoteService::CopyFrom(const RemoteService& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteService::IsInitialized() const {

  return true;
}

void RemoteService::Swap(RemoteService* other) {
  if (other != this) {
    std::swap(calibrateencoders_, other->calibrateencoders_);
    std::swap(calibratecurrent_, other->calibratecurrent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RemoteService::GetTypeName() const {
  return "protos.RemoteService";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CalibrateEncoders::CalibrateEncoders()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CalibrateEncoders::InitAsDefaultInstance() {
}

CalibrateEncoders::CalibrateEncoders(const CalibrateEncoders& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CalibrateEncoders::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalibrateEncoders::~CalibrateEncoders() {
  SharedDtor();
}

void CalibrateEncoders::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CalibrateEncoders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CalibrateEncoders& CalibrateEncoders::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RemoteService_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RemoteService_2eproto();
#endif
  return *default_instance_;
}

CalibrateEncoders* CalibrateEncoders::default_instance_ = NULL;

CalibrateEncoders* CalibrateEncoders::New() const {
  return new CalibrateEncoders;
}

void CalibrateEncoders::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CalibrateEncoders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CalibrateEncoders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CalibrateEncoders::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrateEncoders::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CalibrateEncoders*>(&from));
}

void CalibrateEncoders::MergeFrom(const CalibrateEncoders& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CalibrateEncoders::CopyFrom(const CalibrateEncoders& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrateEncoders::IsInitialized() const {

  return true;
}

void CalibrateEncoders::Swap(CalibrateEncoders* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CalibrateEncoders::GetTypeName() const {
  return "protos.CalibrateEncoders";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CalibrateCurrent::CalibrateCurrent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CalibrateCurrent::InitAsDefaultInstance() {
}

CalibrateCurrent::CalibrateCurrent(const CalibrateCurrent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CalibrateCurrent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalibrateCurrent::~CalibrateCurrent() {
  SharedDtor();
}

void CalibrateCurrent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CalibrateCurrent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CalibrateCurrent& CalibrateCurrent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RemoteService_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RemoteService_2eproto();
#endif
  return *default_instance_;
}

CalibrateCurrent* CalibrateCurrent::default_instance_ = NULL;

CalibrateCurrent* CalibrateCurrent::New() const {
  return new CalibrateCurrent;
}

void CalibrateCurrent::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CalibrateCurrent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CalibrateCurrent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CalibrateCurrent::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrateCurrent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CalibrateCurrent*>(&from));
}

void CalibrateCurrent::MergeFrom(const CalibrateCurrent& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CalibrateCurrent::CopyFrom(const CalibrateCurrent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrateCurrent::IsInitialized() const {

  return true;
}

void CalibrateCurrent::Swap(CalibrateCurrent* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CalibrateCurrent::GetTypeName() const {
  return "protos.CalibrateCurrent";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)

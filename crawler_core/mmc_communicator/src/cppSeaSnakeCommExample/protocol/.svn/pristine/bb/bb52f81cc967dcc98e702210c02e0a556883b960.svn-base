// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ModuleControl.proto

#ifndef PROTOBUF_ModuleControl_2eproto__INCLUDED
#define PROTOBUF_ModuleControl_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace protos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ModuleControl_2eproto();
void protobuf_AssignDesc_ModuleControl_2eproto();
void protobuf_ShutdownFile_ModuleControl_2eproto();

class ModuleCommand;
class ModuleFeedback;

// ===================================================================

class ModuleCommand : public ::google::protobuf::MessageLite {
 public:
  ModuleCommand();
  virtual ~ModuleCommand();

  ModuleCommand(const ModuleCommand& from);

  inline ModuleCommand& operator=(const ModuleCommand& from) {
    CopyFrom(from);
    return *this;
  }

  static const ModuleCommand& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ModuleCommand* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ModuleCommand* other);

  // implements Message ----------------------------------------------

  ModuleCommand* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ModuleCommand& from);
  void MergeFrom(const ModuleCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline float position() const;
  inline void set_position(float value);

  // optional float velocity = 2;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  inline float velocity() const;
  inline void set_velocity(float value);

  // optional float torque = 3;
  inline bool has_torque() const;
  inline void clear_torque();
  static const int kTorqueFieldNumber = 3;
  inline float torque() const;
  inline void set_torque(float value);

  // optional float deflection = 4;
  inline bool has_deflection() const;
  inline void clear_deflection();
  static const int kDeflectionFieldNumber = 4;
  inline float deflection() const;
  inline void set_deflection(float value);

  // optional float motor_velocity = 5;
  inline bool has_motor_velocity() const;
  inline void clear_motor_velocity();
  static const int kMotorVelocityFieldNumber = 5;
  inline float motor_velocity() const;
  inline void set_motor_velocity(float value);

  // @@protoc_insertion_point(class_scope:protos.ModuleCommand)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_torque();
  inline void clear_has_torque();
  inline void set_has_deflection();
  inline void clear_has_deflection();
  inline void set_has_motor_velocity();
  inline void clear_has_motor_velocity();

  float position_;
  float velocity_;
  float torque_;
  float deflection_;
  float motor_velocity_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ModuleControl_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ModuleControl_2eproto();
  #endif
  friend void protobuf_AssignDesc_ModuleControl_2eproto();
  friend void protobuf_ShutdownFile_ModuleControl_2eproto();

  void InitAsDefaultInstance();
  static ModuleCommand* default_instance_;
};
// -------------------------------------------------------------------

class ModuleFeedback : public ::google::protobuf::MessageLite {
 public:
  ModuleFeedback();
  virtual ~ModuleFeedback();

  ModuleFeedback(const ModuleFeedback& from);

  inline ModuleFeedback& operator=(const ModuleFeedback& from) {
    CopyFrom(from);
    return *this;
  }

  static const ModuleFeedback& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ModuleFeedback* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ModuleFeedback* other);

  // implements Message ----------------------------------------------

  ModuleFeedback* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ModuleFeedback& from);
  void MergeFrom(const ModuleFeedback& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline float position() const;
  inline void set_position(float value);

  // optional float velocity = 2;
  inline bool has_velocity() const;
  inline void clear_velocity();
  static const int kVelocityFieldNumber = 2;
  inline float velocity() const;
  inline void set_velocity(float value);

  // optional float torque = 3;
  inline bool has_torque() const;
  inline void clear_torque();
  static const int kTorqueFieldNumber = 3;
  inline float torque() const;
  inline void set_torque(float value);

  // optional float deflection = 4;
  inline bool has_deflection() const;
  inline void clear_deflection();
  static const int kDeflectionFieldNumber = 4;
  inline float deflection() const;
  inline void set_deflection(float value);

  // optional float motor_velocity = 5;
  inline bool has_motor_velocity() const;
  inline void clear_motor_velocity();
  static const int kMotorVelocityFieldNumber = 5;
  inline float motor_velocity() const;
  inline void set_motor_velocity(float value);

  // optional float deflection_velocity = 6;
  inline bool has_deflection_velocity() const;
  inline void clear_deflection_velocity();
  static const int kDeflectionVelocityFieldNumber = 6;
  inline float deflection_velocity() const;
  inline void set_deflection_velocity(float value);

  // repeated float accel = 20 [packed = true];
  inline int accel_size() const;
  inline void clear_accel();
  static const int kAccelFieldNumber = 20;
  inline float accel(int index) const;
  inline void set_accel(int index, float value);
  inline void add_accel(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      accel() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_accel();

  // repeated float gyro = 23 [packed = true];
  inline int gyro_size() const;
  inline void clear_gyro();
  static const int kGyroFieldNumber = 23;
  inline float gyro(int index) const;
  inline void set_gyro(int index, float value);
  inline void add_gyro(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      gyro() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_gyro();

  // repeated float compass = 25 [packed = true];
  inline int compass_size() const;
  inline void clear_compass();
  static const int kCompassFieldNumber = 25;
  inline float compass(int index) const;
  inline void set_compass(int index, float value);
  inline void add_compass(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      compass() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_compass();

  // optional float motor_current = 40;
  inline bool has_motor_current() const;
  inline void clear_motor_current();
  static const int kMotorCurrentFieldNumber = 40;
  inline float motor_current() const;
  inline void set_motor_current(float value);

  // optional float module_current = 41;
  inline bool has_module_current() const;
  inline void clear_module_current();
  static const int kModuleCurrentFieldNumber = 41;
  inline float module_current() const;
  inline void set_module_current(float value);

  // optional float motor_temperature = 60;
  inline bool has_motor_temperature() const;
  inline void clear_motor_temperature();
  static const int kMotorTemperatureFieldNumber = 60;
  inline float motor_temperature() const;
  inline void set_motor_temperature(float value);

  // optional float ambient_temperature = 61;
  inline bool has_ambient_temperature() const;
  inline void clear_ambient_temperature();
  static const int kAmbientTemperatureFieldNumber = 61;
  inline float ambient_temperature() const;
  inline void set_ambient_temperature(float value);

  // optional float processor_temperature = 62;
  inline bool has_processor_temperature() const;
  inline void clear_processor_temperature();
  static const int kProcessorTemperatureFieldNumber = 62;
  inline float processor_temperature() const;
  inline void set_processor_temperature(float value);

  // optional float actuator_temperature = 63;
  inline bool has_actuator_temperature() const;
  inline void clear_actuator_temperature();
  static const int kActuatorTemperatureFieldNumber = 63;
  inline float actuator_temperature() const;
  inline void set_actuator_temperature(float value);

  // optional float winding_temperature = 64;
  inline bool has_winding_temperature() const;
  inline void clear_winding_temperature();
  static const int kWindingTemperatureFieldNumber = 64;
  inline float winding_temperature() const;
  inline void set_winding_temperature(float value);

  // optional float pressure = 80;
  inline bool has_pressure() const;
  inline void clear_pressure();
  static const int kPressureFieldNumber = 80;
  inline float pressure() const;
  inline void set_pressure(float value);

  // optional float voltage = 81;
  inline bool has_voltage() const;
  inline void clear_voltage();
  static const int kVoltageFieldNumber = 81;
  inline float voltage() const;
  inline void set_voltage(float value);

  // optional float spring_constant = 82;
  inline bool has_spring_constant() const;
  inline void clear_spring_constant();
  static const int kSpringConstantFieldNumber = 82;
  inline float spring_constant() const;
  inline void set_spring_constant(float value);

  // optional float position_target = 101;
  inline bool has_position_target() const;
  inline void clear_position_target();
  static const int kPositionTargetFieldNumber = 101;
  inline float position_target() const;
  inline void set_position_target(float value);

  // optional float velocity_target = 102;
  inline bool has_velocity_target() const;
  inline void clear_velocity_target();
  static const int kVelocityTargetFieldNumber = 102;
  inline float velocity_target() const;
  inline void set_velocity_target(float value);

  // optional float torque_target = 103;
  inline bool has_torque_target() const;
  inline void clear_torque_target();
  static const int kTorqueTargetFieldNumber = 103;
  inline float torque_target() const;
  inline void set_torque_target(float value);

  // optional float inner_torque_target = 104;
  inline bool has_inner_torque_target() const;
  inline void clear_inner_torque_target();
  static const int kInnerTorqueTargetFieldNumber = 104;
  inline float inner_torque_target() const;
  inline void set_inner_torque_target(float value);

  // optional float pwm_target = 105;
  inline bool has_pwm_target() const;
  inline void clear_pwm_target();
  static const int kPwmTargetFieldNumber = 105;
  inline float pwm_target() const;
  inline void set_pwm_target(float value);

  // @@protoc_insertion_point(class_scope:protos.ModuleFeedback)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_velocity();
  inline void clear_has_velocity();
  inline void set_has_torque();
  inline void clear_has_torque();
  inline void set_has_deflection();
  inline void clear_has_deflection();
  inline void set_has_motor_velocity();
  inline void clear_has_motor_velocity();
  inline void set_has_deflection_velocity();
  inline void clear_has_deflection_velocity();
  inline void set_has_motor_current();
  inline void clear_has_motor_current();
  inline void set_has_module_current();
  inline void clear_has_module_current();
  inline void set_has_motor_temperature();
  inline void clear_has_motor_temperature();
  inline void set_has_ambient_temperature();
  inline void clear_has_ambient_temperature();
  inline void set_has_processor_temperature();
  inline void clear_has_processor_temperature();
  inline void set_has_actuator_temperature();
  inline void clear_has_actuator_temperature();
  inline void set_has_winding_temperature();
  inline void clear_has_winding_temperature();
  inline void set_has_pressure();
  inline void clear_has_pressure();
  inline void set_has_voltage();
  inline void clear_has_voltage();
  inline void set_has_spring_constant();
  inline void clear_has_spring_constant();
  inline void set_has_position_target();
  inline void clear_has_position_target();
  inline void set_has_velocity_target();
  inline void clear_has_velocity_target();
  inline void set_has_torque_target();
  inline void clear_has_torque_target();
  inline void set_has_inner_torque_target();
  inline void clear_has_inner_torque_target();
  inline void set_has_pwm_target();
  inline void clear_has_pwm_target();

  float position_;
  float velocity_;
  float torque_;
  float deflection_;
  float motor_velocity_;
  float deflection_velocity_;
  ::google::protobuf::RepeatedField< float > accel_;
  mutable int _accel_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > gyro_;
  mutable int _gyro_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > compass_;
  mutable int _compass_cached_byte_size_;
  float motor_current_;
  float module_current_;
  float motor_temperature_;
  float ambient_temperature_;
  float processor_temperature_;
  float actuator_temperature_;
  float winding_temperature_;
  float pressure_;
  float voltage_;
  float spring_constant_;
  float position_target_;
  float velocity_target_;
  float torque_target_;
  float inner_torque_target_;
  float pwm_target_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ModuleControl_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ModuleControl_2eproto();
  #endif
  friend void protobuf_AssignDesc_ModuleControl_2eproto();
  friend void protobuf_ShutdownFile_ModuleControl_2eproto();

  void InitAsDefaultInstance();
  static ModuleFeedback* default_instance_;
};
// ===================================================================


// ===================================================================

// ModuleCommand

// optional float position = 1;
inline bool ModuleCommand::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModuleCommand::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModuleCommand::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModuleCommand::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline float ModuleCommand::position() const {
  return position_;
}
inline void ModuleCommand::set_position(float value) {
  set_has_position();
  position_ = value;
}

// optional float velocity = 2;
inline bool ModuleCommand::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModuleCommand::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModuleCommand::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModuleCommand::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline float ModuleCommand::velocity() const {
  return velocity_;
}
inline void ModuleCommand::set_velocity(float value) {
  set_has_velocity();
  velocity_ = value;
}

// optional float torque = 3;
inline bool ModuleCommand::has_torque() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModuleCommand::set_has_torque() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModuleCommand::clear_has_torque() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModuleCommand::clear_torque() {
  torque_ = 0;
  clear_has_torque();
}
inline float ModuleCommand::torque() const {
  return torque_;
}
inline void ModuleCommand::set_torque(float value) {
  set_has_torque();
  torque_ = value;
}

// optional float deflection = 4;
inline bool ModuleCommand::has_deflection() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModuleCommand::set_has_deflection() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModuleCommand::clear_has_deflection() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModuleCommand::clear_deflection() {
  deflection_ = 0;
  clear_has_deflection();
}
inline float ModuleCommand::deflection() const {
  return deflection_;
}
inline void ModuleCommand::set_deflection(float value) {
  set_has_deflection();
  deflection_ = value;
}

// optional float motor_velocity = 5;
inline bool ModuleCommand::has_motor_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModuleCommand::set_has_motor_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModuleCommand::clear_has_motor_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModuleCommand::clear_motor_velocity() {
  motor_velocity_ = 0;
  clear_has_motor_velocity();
}
inline float ModuleCommand::motor_velocity() const {
  return motor_velocity_;
}
inline void ModuleCommand::set_motor_velocity(float value) {
  set_has_motor_velocity();
  motor_velocity_ = value;
}

// -------------------------------------------------------------------

// ModuleFeedback

// optional float position = 1;
inline bool ModuleFeedback::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModuleFeedback::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModuleFeedback::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModuleFeedback::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline float ModuleFeedback::position() const {
  return position_;
}
inline void ModuleFeedback::set_position(float value) {
  set_has_position();
  position_ = value;
}

// optional float velocity = 2;
inline bool ModuleFeedback::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModuleFeedback::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModuleFeedback::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModuleFeedback::clear_velocity() {
  velocity_ = 0;
  clear_has_velocity();
}
inline float ModuleFeedback::velocity() const {
  return velocity_;
}
inline void ModuleFeedback::set_velocity(float value) {
  set_has_velocity();
  velocity_ = value;
}

// optional float torque = 3;
inline bool ModuleFeedback::has_torque() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModuleFeedback::set_has_torque() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModuleFeedback::clear_has_torque() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModuleFeedback::clear_torque() {
  torque_ = 0;
  clear_has_torque();
}
inline float ModuleFeedback::torque() const {
  return torque_;
}
inline void ModuleFeedback::set_torque(float value) {
  set_has_torque();
  torque_ = value;
}

// optional float deflection = 4;
inline bool ModuleFeedback::has_deflection() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModuleFeedback::set_has_deflection() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModuleFeedback::clear_has_deflection() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModuleFeedback::clear_deflection() {
  deflection_ = 0;
  clear_has_deflection();
}
inline float ModuleFeedback::deflection() const {
  return deflection_;
}
inline void ModuleFeedback::set_deflection(float value) {
  set_has_deflection();
  deflection_ = value;
}

// optional float motor_velocity = 5;
inline bool ModuleFeedback::has_motor_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ModuleFeedback::set_has_motor_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ModuleFeedback::clear_has_motor_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ModuleFeedback::clear_motor_velocity() {
  motor_velocity_ = 0;
  clear_has_motor_velocity();
}
inline float ModuleFeedback::motor_velocity() const {
  return motor_velocity_;
}
inline void ModuleFeedback::set_motor_velocity(float value) {
  set_has_motor_velocity();
  motor_velocity_ = value;
}

// optional float deflection_velocity = 6;
inline bool ModuleFeedback::has_deflection_velocity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ModuleFeedback::set_has_deflection_velocity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ModuleFeedback::clear_has_deflection_velocity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ModuleFeedback::clear_deflection_velocity() {
  deflection_velocity_ = 0;
  clear_has_deflection_velocity();
}
inline float ModuleFeedback::deflection_velocity() const {
  return deflection_velocity_;
}
inline void ModuleFeedback::set_deflection_velocity(float value) {
  set_has_deflection_velocity();
  deflection_velocity_ = value;
}

// repeated float accel = 20 [packed = true];
inline int ModuleFeedback::accel_size() const {
  return accel_.size();
}
inline void ModuleFeedback::clear_accel() {
  accel_.Clear();
}
inline float ModuleFeedback::accel(int index) const {
  return accel_.Get(index);
}
inline void ModuleFeedback::set_accel(int index, float value) {
  accel_.Set(index, value);
}
inline void ModuleFeedback::add_accel(float value) {
  accel_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ModuleFeedback::accel() const {
  return accel_;
}
inline ::google::protobuf::RepeatedField< float >*
ModuleFeedback::mutable_accel() {
  return &accel_;
}

// repeated float gyro = 23 [packed = true];
inline int ModuleFeedback::gyro_size() const {
  return gyro_.size();
}
inline void ModuleFeedback::clear_gyro() {
  gyro_.Clear();
}
inline float ModuleFeedback::gyro(int index) const {
  return gyro_.Get(index);
}
inline void ModuleFeedback::set_gyro(int index, float value) {
  gyro_.Set(index, value);
}
inline void ModuleFeedback::add_gyro(float value) {
  gyro_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ModuleFeedback::gyro() const {
  return gyro_;
}
inline ::google::protobuf::RepeatedField< float >*
ModuleFeedback::mutable_gyro() {
  return &gyro_;
}

// repeated float compass = 25 [packed = true];
inline int ModuleFeedback::compass_size() const {
  return compass_.size();
}
inline void ModuleFeedback::clear_compass() {
  compass_.Clear();
}
inline float ModuleFeedback::compass(int index) const {
  return compass_.Get(index);
}
inline void ModuleFeedback::set_compass(int index, float value) {
  compass_.Set(index, value);
}
inline void ModuleFeedback::add_compass(float value) {
  compass_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
ModuleFeedback::compass() const {
  return compass_;
}
inline ::google::protobuf::RepeatedField< float >*
ModuleFeedback::mutable_compass() {
  return &compass_;
}

// optional float motor_current = 40;
inline bool ModuleFeedback::has_motor_current() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ModuleFeedback::set_has_motor_current() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ModuleFeedback::clear_has_motor_current() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ModuleFeedback::clear_motor_current() {
  motor_current_ = 0;
  clear_has_motor_current();
}
inline float ModuleFeedback::motor_current() const {
  return motor_current_;
}
inline void ModuleFeedback::set_motor_current(float value) {
  set_has_motor_current();
  motor_current_ = value;
}

// optional float module_current = 41;
inline bool ModuleFeedback::has_module_current() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ModuleFeedback::set_has_module_current() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ModuleFeedback::clear_has_module_current() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ModuleFeedback::clear_module_current() {
  module_current_ = 0;
  clear_has_module_current();
}
inline float ModuleFeedback::module_current() const {
  return module_current_;
}
inline void ModuleFeedback::set_module_current(float value) {
  set_has_module_current();
  module_current_ = value;
}

// optional float motor_temperature = 60;
inline bool ModuleFeedback::has_motor_temperature() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ModuleFeedback::set_has_motor_temperature() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ModuleFeedback::clear_has_motor_temperature() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ModuleFeedback::clear_motor_temperature() {
  motor_temperature_ = 0;
  clear_has_motor_temperature();
}
inline float ModuleFeedback::motor_temperature() const {
  return motor_temperature_;
}
inline void ModuleFeedback::set_motor_temperature(float value) {
  set_has_motor_temperature();
  motor_temperature_ = value;
}

// optional float ambient_temperature = 61;
inline bool ModuleFeedback::has_ambient_temperature() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ModuleFeedback::set_has_ambient_temperature() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ModuleFeedback::clear_has_ambient_temperature() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ModuleFeedback::clear_ambient_temperature() {
  ambient_temperature_ = 0;
  clear_has_ambient_temperature();
}
inline float ModuleFeedback::ambient_temperature() const {
  return ambient_temperature_;
}
inline void ModuleFeedback::set_ambient_temperature(float value) {
  set_has_ambient_temperature();
  ambient_temperature_ = value;
}

// optional float processor_temperature = 62;
inline bool ModuleFeedback::has_processor_temperature() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ModuleFeedback::set_has_processor_temperature() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ModuleFeedback::clear_has_processor_temperature() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ModuleFeedback::clear_processor_temperature() {
  processor_temperature_ = 0;
  clear_has_processor_temperature();
}
inline float ModuleFeedback::processor_temperature() const {
  return processor_temperature_;
}
inline void ModuleFeedback::set_processor_temperature(float value) {
  set_has_processor_temperature();
  processor_temperature_ = value;
}

// optional float actuator_temperature = 63;
inline bool ModuleFeedback::has_actuator_temperature() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ModuleFeedback::set_has_actuator_temperature() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ModuleFeedback::clear_has_actuator_temperature() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ModuleFeedback::clear_actuator_temperature() {
  actuator_temperature_ = 0;
  clear_has_actuator_temperature();
}
inline float ModuleFeedback::actuator_temperature() const {
  return actuator_temperature_;
}
inline void ModuleFeedback::set_actuator_temperature(float value) {
  set_has_actuator_temperature();
  actuator_temperature_ = value;
}

// optional float winding_temperature = 64;
inline bool ModuleFeedback::has_winding_temperature() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ModuleFeedback::set_has_winding_temperature() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ModuleFeedback::clear_has_winding_temperature() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ModuleFeedback::clear_winding_temperature() {
  winding_temperature_ = 0;
  clear_has_winding_temperature();
}
inline float ModuleFeedback::winding_temperature() const {
  return winding_temperature_;
}
inline void ModuleFeedback::set_winding_temperature(float value) {
  set_has_winding_temperature();
  winding_temperature_ = value;
}

// optional float pressure = 80;
inline bool ModuleFeedback::has_pressure() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ModuleFeedback::set_has_pressure() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ModuleFeedback::clear_has_pressure() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ModuleFeedback::clear_pressure() {
  pressure_ = 0;
  clear_has_pressure();
}
inline float ModuleFeedback::pressure() const {
  return pressure_;
}
inline void ModuleFeedback::set_pressure(float value) {
  set_has_pressure();
  pressure_ = value;
}

// optional float voltage = 81;
inline bool ModuleFeedback::has_voltage() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ModuleFeedback::set_has_voltage() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ModuleFeedback::clear_has_voltage() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ModuleFeedback::clear_voltage() {
  voltage_ = 0;
  clear_has_voltage();
}
inline float ModuleFeedback::voltage() const {
  return voltage_;
}
inline void ModuleFeedback::set_voltage(float value) {
  set_has_voltage();
  voltage_ = value;
}

// optional float spring_constant = 82;
inline bool ModuleFeedback::has_spring_constant() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ModuleFeedback::set_has_spring_constant() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ModuleFeedback::clear_has_spring_constant() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ModuleFeedback::clear_spring_constant() {
  spring_constant_ = 0;
  clear_has_spring_constant();
}
inline float ModuleFeedback::spring_constant() const {
  return spring_constant_;
}
inline void ModuleFeedback::set_spring_constant(float value) {
  set_has_spring_constant();
  spring_constant_ = value;
}

// optional float position_target = 101;
inline bool ModuleFeedback::has_position_target() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ModuleFeedback::set_has_position_target() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ModuleFeedback::clear_has_position_target() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ModuleFeedback::clear_position_target() {
  position_target_ = 0;
  clear_has_position_target();
}
inline float ModuleFeedback::position_target() const {
  return position_target_;
}
inline void ModuleFeedback::set_position_target(float value) {
  set_has_position_target();
  position_target_ = value;
}

// optional float velocity_target = 102;
inline bool ModuleFeedback::has_velocity_target() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ModuleFeedback::set_has_velocity_target() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ModuleFeedback::clear_has_velocity_target() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ModuleFeedback::clear_velocity_target() {
  velocity_target_ = 0;
  clear_has_velocity_target();
}
inline float ModuleFeedback::velocity_target() const {
  return velocity_target_;
}
inline void ModuleFeedback::set_velocity_target(float value) {
  set_has_velocity_target();
  velocity_target_ = value;
}

// optional float torque_target = 103;
inline bool ModuleFeedback::has_torque_target() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ModuleFeedback::set_has_torque_target() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ModuleFeedback::clear_has_torque_target() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ModuleFeedback::clear_torque_target() {
  torque_target_ = 0;
  clear_has_torque_target();
}
inline float ModuleFeedback::torque_target() const {
  return torque_target_;
}
inline void ModuleFeedback::set_torque_target(float value) {
  set_has_torque_target();
  torque_target_ = value;
}

// optional float inner_torque_target = 104;
inline bool ModuleFeedback::has_inner_torque_target() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ModuleFeedback::set_has_inner_torque_target() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ModuleFeedback::clear_has_inner_torque_target() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ModuleFeedback::clear_inner_torque_target() {
  inner_torque_target_ = 0;
  clear_has_inner_torque_target();
}
inline float ModuleFeedback::inner_torque_target() const {
  return inner_torque_target_;
}
inline void ModuleFeedback::set_inner_torque_target(float value) {
  set_has_inner_torque_target();
  inner_torque_target_ = value;
}

// optional float pwm_target = 105;
inline bool ModuleFeedback::has_pwm_target() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ModuleFeedback::set_has_pwm_target() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ModuleFeedback::clear_has_pwm_target() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ModuleFeedback::clear_pwm_target() {
  pwm_target_ = 0;
  clear_has_pwm_target();
}
inline float ModuleFeedback::pwm_target() const {
  return pwm_target_;
}
inline void ModuleFeedback::set_pwm_target(float value) {
  set_has_pwm_target();
  pwm_target_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ModuleControl_2eproto__INCLUDED

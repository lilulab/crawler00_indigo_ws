// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RemoteServices.proto

#ifndef PROTOBUF_RemoteServices_2eproto__INCLUDED
#define PROTOBUF_RemoteServices_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace biorobotics {
namespace firmware {
namespace protos {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RemoteServices_2eproto();
void protobuf_AssignDesc_RemoteServices_2eproto();
void protobuf_ShutdownFile_RemoteServices_2eproto();

class RemoteServices;
class Calibrate;
class CalibrateCurrent;

// ===================================================================

class RemoteServices : public ::google::protobuf::MessageLite {
 public:
  RemoteServices();
  virtual ~RemoteServices();

  RemoteServices(const RemoteServices& from);

  inline RemoteServices& operator=(const RemoteServices& from) {
    CopyFrom(from);
    return *this;
  }

  static const RemoteServices& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const RemoteServices* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(RemoteServices* other);

  // implements Message ----------------------------------------------

  RemoteServices* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const RemoteServices& from);
  void MergeFrom(const RemoteServices& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .biorobotics.firmware.protos.Calibrate calibrate = 10;
  inline bool has_calibrate() const;
  inline void clear_calibrate();
  static const int kCalibrateFieldNumber = 10;
  inline const ::biorobotics::firmware::protos::Calibrate& calibrate() const;
  inline ::biorobotics::firmware::protos::Calibrate* mutable_calibrate();
  inline ::biorobotics::firmware::protos::Calibrate* release_calibrate();
  inline void set_allocated_calibrate(::biorobotics::firmware::protos::Calibrate* calibrate);

  // optional .biorobotics.firmware.protos.CalibrateCurrent calibrateCurrent = 11;
  inline bool has_calibratecurrent() const;
  inline void clear_calibratecurrent();
  static const int kCalibrateCurrentFieldNumber = 11;
  inline const ::biorobotics::firmware::protos::CalibrateCurrent& calibratecurrent() const;
  inline ::biorobotics::firmware::protos::CalibrateCurrent* mutable_calibratecurrent();
  inline ::biorobotics::firmware::protos::CalibrateCurrent* release_calibratecurrent();
  inline void set_allocated_calibratecurrent(::biorobotics::firmware::protos::CalibrateCurrent* calibratecurrent);

  // @@protoc_insertion_point(class_scope:biorobotics.firmware.protos.RemoteServices)
 private:
  inline void set_has_calibrate();
  inline void clear_has_calibrate();
  inline void set_has_calibratecurrent();
  inline void clear_has_calibratecurrent();

  ::biorobotics::firmware::protos::Calibrate* calibrate_;
  ::biorobotics::firmware::protos::CalibrateCurrent* calibratecurrent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_RemoteServices_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_RemoteServices_2eproto();
  #endif
  friend void protobuf_AssignDesc_RemoteServices_2eproto();
  friend void protobuf_ShutdownFile_RemoteServices_2eproto();

  void InitAsDefaultInstance();
  static RemoteServices* default_instance_;
};
// -------------------------------------------------------------------

class Calibrate : public ::google::protobuf::MessageLite {
 public:
  Calibrate();
  virtual ~Calibrate();

  Calibrate(const Calibrate& from);

  inline Calibrate& operator=(const Calibrate& from) {
    CopyFrom(from);
    return *this;
  }

  static const Calibrate& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Calibrate* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Calibrate* other);

  // implements Message ----------------------------------------------

  Calibrate* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Calibrate& from);
  void MergeFrom(const Calibrate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool encoders = 1;
  inline bool has_encoders() const;
  inline void clear_encoders();
  static const int kEncodersFieldNumber = 1;
  inline bool encoders() const;
  inline void set_encoders(bool value);

  // optional bool current = 2;
  inline bool has_current() const;
  inline void clear_current();
  static const int kCurrentFieldNumber = 2;
  inline bool current() const;
  inline void set_current(bool value);

  // optional bool wobble = 3;
  inline bool has_wobble() const;
  inline void clear_wobble();
  static const int kWobbleFieldNumber = 3;
  inline bool wobble() const;
  inline void set_wobble(bool value);

  // @@protoc_insertion_point(class_scope:biorobotics.firmware.protos.Calibrate)
 private:
  inline void set_has_encoders();
  inline void clear_has_encoders();
  inline void set_has_current();
  inline void clear_has_current();
  inline void set_has_wobble();
  inline void clear_has_wobble();

  bool encoders_;
  bool current_;
  bool wobble_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_RemoteServices_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_RemoteServices_2eproto();
  #endif
  friend void protobuf_AssignDesc_RemoteServices_2eproto();
  friend void protobuf_ShutdownFile_RemoteServices_2eproto();

  void InitAsDefaultInstance();
  static Calibrate* default_instance_;
};
// -------------------------------------------------------------------

class CalibrateCurrent : public ::google::protobuf::MessageLite {
 public:
  CalibrateCurrent();
  virtual ~CalibrateCurrent();

  CalibrateCurrent(const CalibrateCurrent& from);

  inline CalibrateCurrent& operator=(const CalibrateCurrent& from) {
    CopyFrom(from);
    return *this;
  }

  static const CalibrateCurrent& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CalibrateCurrent* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CalibrateCurrent* other);

  // implements Message ----------------------------------------------

  CalibrateCurrent* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CalibrateCurrent& from);
  void MergeFrom(const CalibrateCurrent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:biorobotics.firmware.protos.CalibrateCurrent)
 private:


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_RemoteServices_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_RemoteServices_2eproto();
  #endif
  friend void protobuf_AssignDesc_RemoteServices_2eproto();
  friend void protobuf_ShutdownFile_RemoteServices_2eproto();

  void InitAsDefaultInstance();
  static CalibrateCurrent* default_instance_;
};
// ===================================================================


// ===================================================================

// RemoteServices

// optional .biorobotics.firmware.protos.Calibrate calibrate = 10;
inline bool RemoteServices::has_calibrate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoteServices::set_has_calibrate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoteServices::clear_has_calibrate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoteServices::clear_calibrate() {
  if (calibrate_ != NULL) calibrate_->::biorobotics::firmware::protos::Calibrate::Clear();
  clear_has_calibrate();
}
inline const ::biorobotics::firmware::protos::Calibrate& RemoteServices::calibrate() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return calibrate_ != NULL ? *calibrate_ : *default_instance().calibrate_;
#else
  return calibrate_ != NULL ? *calibrate_ : *default_instance_->calibrate_;
#endif
}
inline ::biorobotics::firmware::protos::Calibrate* RemoteServices::mutable_calibrate() {
  set_has_calibrate();
  if (calibrate_ == NULL) calibrate_ = new ::biorobotics::firmware::protos::Calibrate;
  return calibrate_;
}
inline ::biorobotics::firmware::protos::Calibrate* RemoteServices::release_calibrate() {
  clear_has_calibrate();
  ::biorobotics::firmware::protos::Calibrate* temp = calibrate_;
  calibrate_ = NULL;
  return temp;
}
inline void RemoteServices::set_allocated_calibrate(::biorobotics::firmware::protos::Calibrate* calibrate) {
  delete calibrate_;
  calibrate_ = calibrate;
  if (calibrate) {
    set_has_calibrate();
  } else {
    clear_has_calibrate();
  }
}

// optional .biorobotics.firmware.protos.CalibrateCurrent calibrateCurrent = 11;
inline bool RemoteServices::has_calibratecurrent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoteServices::set_has_calibratecurrent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoteServices::clear_has_calibratecurrent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoteServices::clear_calibratecurrent() {
  if (calibratecurrent_ != NULL) calibratecurrent_->::biorobotics::firmware::protos::CalibrateCurrent::Clear();
  clear_has_calibratecurrent();
}
inline const ::biorobotics::firmware::protos::CalibrateCurrent& RemoteServices::calibratecurrent() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return calibratecurrent_ != NULL ? *calibratecurrent_ : *default_instance().calibratecurrent_;
#else
  return calibratecurrent_ != NULL ? *calibratecurrent_ : *default_instance_->calibratecurrent_;
#endif
}
inline ::biorobotics::firmware::protos::CalibrateCurrent* RemoteServices::mutable_calibratecurrent() {
  set_has_calibratecurrent();
  if (calibratecurrent_ == NULL) calibratecurrent_ = new ::biorobotics::firmware::protos::CalibrateCurrent;
  return calibratecurrent_;
}
inline ::biorobotics::firmware::protos::CalibrateCurrent* RemoteServices::release_calibratecurrent() {
  clear_has_calibratecurrent();
  ::biorobotics::firmware::protos::CalibrateCurrent* temp = calibratecurrent_;
  calibratecurrent_ = NULL;
  return temp;
}
inline void RemoteServices::set_allocated_calibratecurrent(::biorobotics::firmware::protos::CalibrateCurrent* calibratecurrent) {
  delete calibratecurrent_;
  calibratecurrent_ = calibratecurrent;
  if (calibratecurrent) {
    set_has_calibratecurrent();
  } else {
    clear_has_calibratecurrent();
  }
}

// -------------------------------------------------------------------

// Calibrate

// optional bool encoders = 1;
inline bool Calibrate::has_encoders() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Calibrate::set_has_encoders() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Calibrate::clear_has_encoders() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Calibrate::clear_encoders() {
  encoders_ = false;
  clear_has_encoders();
}
inline bool Calibrate::encoders() const {
  return encoders_;
}
inline void Calibrate::set_encoders(bool value) {
  set_has_encoders();
  encoders_ = value;
}

// optional bool current = 2;
inline bool Calibrate::has_current() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Calibrate::set_has_current() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Calibrate::clear_has_current() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Calibrate::clear_current() {
  current_ = false;
  clear_has_current();
}
inline bool Calibrate::current() const {
  return current_;
}
inline void Calibrate::set_current(bool value) {
  set_has_current();
  current_ = value;
}

// optional bool wobble = 3;
inline bool Calibrate::has_wobble() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Calibrate::set_has_wobble() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Calibrate::clear_has_wobble() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Calibrate::clear_wobble() {
  wobble_ = false;
  clear_has_wobble();
}
inline bool Calibrate::wobble() const {
  return wobble_;
}
inline void Calibrate::set_wobble(bool value) {
  set_has_wobble();
  wobble_ = value;
}

// -------------------------------------------------------------------

// CalibrateCurrent


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace firmware
}  // namespace biorobotics

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RemoteServices_2eproto__INCLUDED

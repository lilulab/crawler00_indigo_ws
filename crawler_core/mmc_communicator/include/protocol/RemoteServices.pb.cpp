// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RemoteServices.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RemoteServices.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace biorobotics {
namespace firmware {
namespace protos {

void protobuf_ShutdownFile_RemoteServices_2eproto() {
  delete RemoteServices::default_instance_;
  delete Calibrate::default_instance_;
  delete CalibrateCurrent::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_RemoteServices_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_RemoteServices_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  RemoteServices::default_instance_ = new RemoteServices();
  Calibrate::default_instance_ = new Calibrate();
  CalibrateCurrent::default_instance_ = new CalibrateCurrent();
  RemoteServices::default_instance_->InitAsDefaultInstance();
  Calibrate::default_instance_->InitAsDefaultInstance();
  CalibrateCurrent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RemoteServices_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_RemoteServices_2eproto_once_);
void protobuf_AddDesc_RemoteServices_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_RemoteServices_2eproto_once_,
                 &protobuf_AddDesc_RemoteServices_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RemoteServices_2eproto {
  StaticDescriptorInitializer_RemoteServices_2eproto() {
    protobuf_AddDesc_RemoteServices_2eproto();
  }
} static_descriptor_initializer_RemoteServices_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int RemoteServices::kCalibrateFieldNumber;
const int RemoteServices::kCalibrateCurrentFieldNumber;
#endif  // !_MSC_VER

RemoteServices::RemoteServices()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RemoteServices::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  calibrate_ = const_cast< ::biorobotics::firmware::protos::Calibrate*>(
      ::biorobotics::firmware::protos::Calibrate::internal_default_instance());
#else
  calibrate_ = const_cast< ::biorobotics::firmware::protos::Calibrate*>(&::biorobotics::firmware::protos::Calibrate::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  calibratecurrent_ = const_cast< ::biorobotics::firmware::protos::CalibrateCurrent*>(
      ::biorobotics::firmware::protos::CalibrateCurrent::internal_default_instance());
#else
  calibratecurrent_ = const_cast< ::biorobotics::firmware::protos::CalibrateCurrent*>(&::biorobotics::firmware::protos::CalibrateCurrent::default_instance());
#endif
}

RemoteServices::RemoteServices(const RemoteServices& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RemoteServices::SharedCtor() {
  _cached_size_ = 0;
  calibrate_ = NULL;
  calibratecurrent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoteServices::~RemoteServices() {
  SharedDtor();
}

void RemoteServices::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete calibrate_;
    delete calibratecurrent_;
  }
}

void RemoteServices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoteServices& RemoteServices::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RemoteServices_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RemoteServices_2eproto();
#endif
  return *default_instance_;
}

RemoteServices* RemoteServices::default_instance_ = NULL;

RemoteServices* RemoteServices::New() const {
  return new RemoteServices;
}

void RemoteServices::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_calibrate()) {
      if (calibrate_ != NULL) calibrate_->::biorobotics::firmware::protos::Calibrate::Clear();
    }
    if (has_calibratecurrent()) {
      if (calibratecurrent_ != NULL) calibratecurrent_->::biorobotics::firmware::protos::CalibrateCurrent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RemoteServices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .biorobotics.firmware.protos.Calibrate calibrate = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibrate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_calibrateCurrent;
        break;
      }

      // optional .biorobotics.firmware.protos.CalibrateCurrent calibrateCurrent = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calibrateCurrent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calibratecurrent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemoteServices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .biorobotics.firmware.protos.Calibrate calibrate = 10;
  if (has_calibrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->calibrate(), output);
  }

  // optional .biorobotics.firmware.protos.CalibrateCurrent calibrateCurrent = 11;
  if (has_calibratecurrent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->calibratecurrent(), output);
  }

}

int RemoteServices::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .biorobotics.firmware.protos.Calibrate calibrate = 10;
    if (has_calibrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calibrate());
    }

    // optional .biorobotics.firmware.protos.CalibrateCurrent calibrateCurrent = 11;
    if (has_calibratecurrent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calibratecurrent());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoteServices::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoteServices*>(&from));
}

void RemoteServices::MergeFrom(const RemoteServices& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_calibrate()) {
      mutable_calibrate()->::biorobotics::firmware::protos::Calibrate::MergeFrom(from.calibrate());
    }
    if (from.has_calibratecurrent()) {
      mutable_calibratecurrent()->::biorobotics::firmware::protos::CalibrateCurrent::MergeFrom(from.calibratecurrent());
    }
  }
}

void RemoteServices::CopyFrom(const RemoteServices& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteServices::IsInitialized() const {

  return true;
}

void RemoteServices::Swap(RemoteServices* other) {
  if (other != this) {
    std::swap(calibrate_, other->calibrate_);
    std::swap(calibratecurrent_, other->calibratecurrent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RemoteServices::GetTypeName() const {
  return "biorobotics.firmware.protos.RemoteServices";
}


// ===================================================================

#ifndef _MSC_VER
const int Calibrate::kEncodersFieldNumber;
const int Calibrate::kCurrentFieldNumber;
const int Calibrate::kWobbleFieldNumber;
#endif  // !_MSC_VER

Calibrate::Calibrate()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Calibrate::InitAsDefaultInstance() {
}

Calibrate::Calibrate(const Calibrate& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Calibrate::SharedCtor() {
  _cached_size_ = 0;
  encoders_ = false;
  current_ = false;
  wobble_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Calibrate::~Calibrate() {
  SharedDtor();
}

void Calibrate::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Calibrate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Calibrate& Calibrate::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RemoteServices_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RemoteServices_2eproto();
#endif
  return *default_instance_;
}

Calibrate* Calibrate::default_instance_ = NULL;

Calibrate* Calibrate::New() const {
  return new Calibrate;
}

void Calibrate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    encoders_ = false;
    current_ = false;
    wobble_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Calibrate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool encoders = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &encoders_)));
          set_has_encoders();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_current;
        break;
      }

      // optional bool current = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wobble;
        break;
      }

      // optional bool wobble = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wobble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wobble_)));
          set_has_wobble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Calibrate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool encoders = 1;
  if (has_encoders()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->encoders(), output);
  }

  // optional bool current = 2;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->current(), output);
  }

  // optional bool wobble = 3;
  if (has_wobble()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->wobble(), output);
  }

}

int Calibrate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool encoders = 1;
    if (has_encoders()) {
      total_size += 1 + 1;
    }

    // optional bool current = 2;
    if (has_current()) {
      total_size += 1 + 1;
    }

    // optional bool wobble = 3;
    if (has_wobble()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Calibrate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Calibrate*>(&from));
}

void Calibrate::MergeFrom(const Calibrate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encoders()) {
      set_encoders(from.encoders());
    }
    if (from.has_current()) {
      set_current(from.current());
    }
    if (from.has_wobble()) {
      set_wobble(from.wobble());
    }
  }
}

void Calibrate::CopyFrom(const Calibrate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Calibrate::IsInitialized() const {

  return true;
}

void Calibrate::Swap(Calibrate* other) {
  if (other != this) {
    std::swap(encoders_, other->encoders_);
    std::swap(current_, other->current_);
    std::swap(wobble_, other->wobble_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Calibrate::GetTypeName() const {
  return "biorobotics.firmware.protos.Calibrate";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CalibrateCurrent::CalibrateCurrent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CalibrateCurrent::InitAsDefaultInstance() {
}

CalibrateCurrent::CalibrateCurrent(const CalibrateCurrent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CalibrateCurrent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CalibrateCurrent::~CalibrateCurrent() {
  SharedDtor();
}

void CalibrateCurrent::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CalibrateCurrent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CalibrateCurrent& CalibrateCurrent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_RemoteServices_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_RemoteServices_2eproto();
#endif
  return *default_instance_;
}

CalibrateCurrent* CalibrateCurrent::default_instance_ = NULL;

CalibrateCurrent* CalibrateCurrent::New() const {
  return new CalibrateCurrent;
}

void CalibrateCurrent::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CalibrateCurrent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CalibrateCurrent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CalibrateCurrent::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CalibrateCurrent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CalibrateCurrent*>(&from));
}

void CalibrateCurrent::MergeFrom(const CalibrateCurrent& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CalibrateCurrent::CopyFrom(const CalibrateCurrent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalibrateCurrent::IsInitialized() const {

  return true;
}

void CalibrateCurrent::Swap(CalibrateCurrent* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CalibrateCurrent::GetTypeName() const {
  return "biorobotics.firmware.protos.CalibrateCurrent";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace firmware
}  // namespace biorobotics

// @@protoc_insertion_point(global_scope)

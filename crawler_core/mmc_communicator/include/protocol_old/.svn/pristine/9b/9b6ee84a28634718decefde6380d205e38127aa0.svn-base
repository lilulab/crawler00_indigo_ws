// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ModuleControl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ModuleControl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protos {

void protobuf_ShutdownFile_ModuleControl_2eproto() {
  delete ModuleCommand::default_instance_;
  delete ModuleFeedback::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ModuleControl_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ModuleControl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ModuleCommand::default_instance_ = new ModuleCommand();
  ModuleFeedback::default_instance_ = new ModuleFeedback();
  ModuleCommand::default_instance_->InitAsDefaultInstance();
  ModuleFeedback::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ModuleControl_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ModuleControl_2eproto_once_);
void protobuf_AddDesc_ModuleControl_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ModuleControl_2eproto_once_,
                 &protobuf_AddDesc_ModuleControl_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ModuleControl_2eproto {
  StaticDescriptorInitializer_ModuleControl_2eproto() {
    protobuf_AddDesc_ModuleControl_2eproto();
  }
} static_descriptor_initializer_ModuleControl_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ModuleCommand::kPositionFieldNumber;
const int ModuleCommand::kVelocityFieldNumber;
const int ModuleCommand::kTorqueFieldNumber;
const int ModuleCommand::kDeflectionFieldNumber;
const int ModuleCommand::kMotorVelocityFieldNumber;
#endif  // !_MSC_VER

ModuleCommand::ModuleCommand()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ModuleCommand::InitAsDefaultInstance() {
}

ModuleCommand::ModuleCommand(const ModuleCommand& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleCommand::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  velocity_ = 0;
  torque_ = 0;
  deflection_ = 0;
  motor_velocity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleCommand::~ModuleCommand() {
  SharedDtor();
}

void ModuleCommand::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ModuleCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ModuleCommand& ModuleCommand::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ModuleControl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ModuleControl_2eproto();
#endif
  return *default_instance_;
}

ModuleCommand* ModuleCommand::default_instance_ = NULL;

ModuleCommand* ModuleCommand::New() const {
  return new ModuleCommand;
}

void ModuleCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
    velocity_ = 0;
    torque_ = 0;
    deflection_ = 0;
    motor_velocity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ModuleCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_velocity;
        break;
      }

      // optional float velocity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_torque;
        break;
      }

      // optional float torque = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_)));
          set_has_torque();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_deflection;
        break;
      }

      // optional float deflection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_deflection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deflection_)));
          set_has_deflection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_motor_velocity;
        break;
      }

      // optional float motor_velocity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_motor_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motor_velocity_)));
          set_has_motor_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->position(), output);
  }

  // optional float velocity = 2;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->velocity(), output);
  }

  // optional float torque = 3;
  if (has_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->torque(), output);
  }

  // optional float deflection = 4;
  if (has_deflection()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->deflection(), output);
  }

  // optional float motor_velocity = 5;
  if (has_motor_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->motor_velocity(), output);
  }

}

int ModuleCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float position = 1;
    if (has_position()) {
      total_size += 1 + 4;
    }

    // optional float velocity = 2;
    if (has_velocity()) {
      total_size += 1 + 4;
    }

    // optional float torque = 3;
    if (has_torque()) {
      total_size += 1 + 4;
    }

    // optional float deflection = 4;
    if (has_deflection()) {
      total_size += 1 + 4;
    }

    // optional float motor_velocity = 5;
    if (has_motor_velocity()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleCommand::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModuleCommand*>(&from));
}

void ModuleCommand::MergeFrom(const ModuleCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_torque()) {
      set_torque(from.torque());
    }
    if (from.has_deflection()) {
      set_deflection(from.deflection());
    }
    if (from.has_motor_velocity()) {
      set_motor_velocity(from.motor_velocity());
    }
  }
}

void ModuleCommand::CopyFrom(const ModuleCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleCommand::IsInitialized() const {

  return true;
}

void ModuleCommand::Swap(ModuleCommand* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(torque_, other->torque_);
    std::swap(deflection_, other->deflection_);
    std::swap(motor_velocity_, other->motor_velocity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ModuleCommand::GetTypeName() const {
  return "protos.ModuleCommand";
}


// ===================================================================

#ifndef _MSC_VER
const int ModuleFeedback::kPositionFieldNumber;
const int ModuleFeedback::kVelocityFieldNumber;
const int ModuleFeedback::kTorqueFieldNumber;
const int ModuleFeedback::kDeflectionFieldNumber;
const int ModuleFeedback::kMotorVelocityFieldNumber;
const int ModuleFeedback::kDeflectionVelocityFieldNumber;
const int ModuleFeedback::kAccelFieldNumber;
const int ModuleFeedback::kGyroFieldNumber;
const int ModuleFeedback::kCompassFieldNumber;
const int ModuleFeedback::kMotorCurrentFieldNumber;
const int ModuleFeedback::kModuleCurrentFieldNumber;
const int ModuleFeedback::kMotorTemperatureFieldNumber;
const int ModuleFeedback::kAmbientTemperatureFieldNumber;
const int ModuleFeedback::kProcessorTemperatureFieldNumber;
const int ModuleFeedback::kActuatorTemperatureFieldNumber;
const int ModuleFeedback::kWindingTemperatureFieldNumber;
const int ModuleFeedback::kPressureFieldNumber;
const int ModuleFeedback::kVoltageFieldNumber;
const int ModuleFeedback::kSpringConstantFieldNumber;
const int ModuleFeedback::kPositionTargetFieldNumber;
const int ModuleFeedback::kVelocityTargetFieldNumber;
const int ModuleFeedback::kTorqueTargetFieldNumber;
const int ModuleFeedback::kInnerTorqueTargetFieldNumber;
const int ModuleFeedback::kPwmTargetFieldNumber;
#endif  // !_MSC_VER

ModuleFeedback::ModuleFeedback()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ModuleFeedback::InitAsDefaultInstance() {
}

ModuleFeedback::ModuleFeedback(const ModuleFeedback& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleFeedback::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  velocity_ = 0;
  torque_ = 0;
  deflection_ = 0;
  motor_velocity_ = 0;
  deflection_velocity_ = 0;
  motor_current_ = 0;
  module_current_ = 0;
  motor_temperature_ = 0;
  ambient_temperature_ = 0;
  processor_temperature_ = 0;
  actuator_temperature_ = 0;
  winding_temperature_ = 0;
  pressure_ = 0;
  voltage_ = 0;
  spring_constant_ = 0;
  position_target_ = 0;
  velocity_target_ = 0;
  torque_target_ = 0;
  inner_torque_target_ = 0;
  pwm_target_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleFeedback::~ModuleFeedback() {
  SharedDtor();
}

void ModuleFeedback::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ModuleFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ModuleFeedback& ModuleFeedback::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ModuleControl_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ModuleControl_2eproto();
#endif
  return *default_instance_;
}

ModuleFeedback* ModuleFeedback::default_instance_ = NULL;

ModuleFeedback* ModuleFeedback::New() const {
  return new ModuleFeedback;
}

void ModuleFeedback::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
    velocity_ = 0;
    torque_ = 0;
    deflection_ = 0;
    motor_velocity_ = 0;
    deflection_velocity_ = 0;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    motor_current_ = 0;
    module_current_ = 0;
    motor_temperature_ = 0;
    ambient_temperature_ = 0;
    processor_temperature_ = 0;
    actuator_temperature_ = 0;
    winding_temperature_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    pressure_ = 0;
    voltage_ = 0;
    spring_constant_ = 0;
    position_target_ = 0;
    velocity_target_ = 0;
    torque_target_ = 0;
    inner_torque_target_ = 0;
    pwm_target_ = 0;
  }
  accel_.Clear();
  gyro_.Clear();
  compass_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ModuleFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_velocity;
        break;
      }

      // optional float velocity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_)));
          set_has_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_torque;
        break;
      }

      // optional float torque = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_torque:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_)));
          set_has_torque();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_deflection;
        break;
      }

      // optional float deflection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_deflection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deflection_)));
          set_has_deflection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_motor_velocity;
        break;
      }

      // optional float motor_velocity = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_motor_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motor_velocity_)));
          set_has_motor_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_deflection_velocity;
        break;
      }

      // optional float deflection_velocity = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_deflection_velocity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &deflection_velocity_)));
          set_has_deflection_velocity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_accel;
        break;
      }

      // repeated float accel = 20 [packed = true];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_accel())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 162, input, this->mutable_accel())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_gyro;
        break;
      }

      // repeated float gyro = 23 [packed = true];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gyro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_gyro())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 186, input, this->mutable_gyro())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_compass;
        break;
      }

      // repeated float compass = 25 [packed = true];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_compass())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 202, input, this->mutable_compass())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(325)) goto parse_motor_current;
        break;
      }

      // optional float motor_current = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_motor_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motor_current_)));
          set_has_motor_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(333)) goto parse_module_current;
        break;
      }

      // optional float module_current = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_module_current:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &module_current_)));
          set_has_module_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(485)) goto parse_motor_temperature;
        break;
      }

      // optional float motor_temperature = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_motor_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motor_temperature_)));
          set_has_motor_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(493)) goto parse_ambient_temperature;
        break;
      }

      // optional float ambient_temperature = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ambient_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ambient_temperature_)));
          set_has_ambient_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(501)) goto parse_processor_temperature;
        break;
      }

      // optional float processor_temperature = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_processor_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &processor_temperature_)));
          set_has_processor_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(509)) goto parse_actuator_temperature;
        break;
      }

      // optional float actuator_temperature = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_actuator_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &actuator_temperature_)));
          set_has_actuator_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(517)) goto parse_winding_temperature;
        break;
      }

      // optional float winding_temperature = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_winding_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &winding_temperature_)));
          set_has_winding_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(645)) goto parse_pressure;
        break;
      }

      // optional float pressure = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pressure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pressure_)));
          set_has_pressure();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(653)) goto parse_voltage;
        break;
      }

      // optional float voltage = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_voltage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &voltage_)));
          set_has_voltage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(661)) goto parse_spring_constant;
        break;
      }

      // optional float spring_constant = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_spring_constant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spring_constant_)));
          set_has_spring_constant();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(813)) goto parse_position_target;
        break;
      }

      // optional float position_target = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_position_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &position_target_)));
          set_has_position_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(821)) goto parse_velocity_target;
        break;
      }

      // optional float velocity_target = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_velocity_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_target_)));
          set_has_velocity_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(829)) goto parse_torque_target;
        break;
      }

      // optional float torque_target = 103;
      case 103: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_torque_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &torque_target_)));
          set_has_torque_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(837)) goto parse_inner_torque_target;
        break;
      }

      // optional float inner_torque_target = 104;
      case 104: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_inner_torque_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inner_torque_target_)));
          set_has_inner_torque_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(845)) goto parse_pwm_target;
        break;
      }

      // optional float pwm_target = 105;
      case 105: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pwm_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pwm_target_)));
          set_has_pwm_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->position(), output);
  }

  // optional float velocity = 2;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->velocity(), output);
  }

  // optional float torque = 3;
  if (has_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->torque(), output);
  }

  // optional float deflection = 4;
  if (has_deflection()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->deflection(), output);
  }

  // optional float motor_velocity = 5;
  if (has_motor_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->motor_velocity(), output);
  }

  // optional float deflection_velocity = 6;
  if (has_deflection_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->deflection_velocity(), output);
  }

  // repeated float accel = 20 [packed = true];
  if (this->accel_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(20, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_accel_cached_byte_size_);
  }
  for (int i = 0; i < this->accel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->accel(i), output);
  }

  // repeated float gyro = 23 [packed = true];
  if (this->gyro_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(23, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_gyro_cached_byte_size_);
  }
  for (int i = 0; i < this->gyro_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->gyro(i), output);
  }

  // repeated float compass = 25 [packed = true];
  if (this->compass_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(25, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_compass_cached_byte_size_);
  }
  for (int i = 0; i < this->compass_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->compass(i), output);
  }

  // optional float motor_current = 40;
  if (has_motor_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->motor_current(), output);
  }

  // optional float module_current = 41;
  if (has_module_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->module_current(), output);
  }

  // optional float motor_temperature = 60;
  if (has_motor_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(60, this->motor_temperature(), output);
  }

  // optional float ambient_temperature = 61;
  if (has_ambient_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(61, this->ambient_temperature(), output);
  }

  // optional float processor_temperature = 62;
  if (has_processor_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(62, this->processor_temperature(), output);
  }

  // optional float actuator_temperature = 63;
  if (has_actuator_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(63, this->actuator_temperature(), output);
  }

  // optional float winding_temperature = 64;
  if (has_winding_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(64, this->winding_temperature(), output);
  }

  // optional float pressure = 80;
  if (has_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(80, this->pressure(), output);
  }

  // optional float voltage = 81;
  if (has_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(81, this->voltage(), output);
  }

  // optional float spring_constant = 82;
  if (has_spring_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(82, this->spring_constant(), output);
  }

  // optional float position_target = 101;
  if (has_position_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(101, this->position_target(), output);
  }

  // optional float velocity_target = 102;
  if (has_velocity_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(102, this->velocity_target(), output);
  }

  // optional float torque_target = 103;
  if (has_torque_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(103, this->torque_target(), output);
  }

  // optional float inner_torque_target = 104;
  if (has_inner_torque_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(104, this->inner_torque_target(), output);
  }

  // optional float pwm_target = 105;
  if (has_pwm_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(105, this->pwm_target(), output);
  }

}

int ModuleFeedback::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float position = 1;
    if (has_position()) {
      total_size += 1 + 4;
    }

    // optional float velocity = 2;
    if (has_velocity()) {
      total_size += 1 + 4;
    }

    // optional float torque = 3;
    if (has_torque()) {
      total_size += 1 + 4;
    }

    // optional float deflection = 4;
    if (has_deflection()) {
      total_size += 1 + 4;
    }

    // optional float motor_velocity = 5;
    if (has_motor_velocity()) {
      total_size += 1 + 4;
    }

    // optional float deflection_velocity = 6;
    if (has_deflection_velocity()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional float motor_current = 40;
    if (has_motor_current()) {
      total_size += 2 + 4;
    }

    // optional float module_current = 41;
    if (has_module_current()) {
      total_size += 2 + 4;
    }

    // optional float motor_temperature = 60;
    if (has_motor_temperature()) {
      total_size += 2 + 4;
    }

    // optional float ambient_temperature = 61;
    if (has_ambient_temperature()) {
      total_size += 2 + 4;
    }

    // optional float processor_temperature = 62;
    if (has_processor_temperature()) {
      total_size += 2 + 4;
    }

    // optional float actuator_temperature = 63;
    if (has_actuator_temperature()) {
      total_size += 2 + 4;
    }

    // optional float winding_temperature = 64;
    if (has_winding_temperature()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float pressure = 80;
    if (has_pressure()) {
      total_size += 2 + 4;
    }

    // optional float voltage = 81;
    if (has_voltage()) {
      total_size += 2 + 4;
    }

    // optional float spring_constant = 82;
    if (has_spring_constant()) {
      total_size += 2 + 4;
    }

    // optional float position_target = 101;
    if (has_position_target()) {
      total_size += 2 + 4;
    }

    // optional float velocity_target = 102;
    if (has_velocity_target()) {
      total_size += 2 + 4;
    }

    // optional float torque_target = 103;
    if (has_torque_target()) {
      total_size += 2 + 4;
    }

    // optional float inner_torque_target = 104;
    if (has_inner_torque_target()) {
      total_size += 2 + 4;
    }

    // optional float pwm_target = 105;
    if (has_pwm_target()) {
      total_size += 2 + 4;
    }

  }
  // repeated float accel = 20 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->accel_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _accel_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float gyro = 23 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->gyro_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gyro_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float compass = 25 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->compass_size();
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _compass_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleFeedback::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModuleFeedback*>(&from));
}

void ModuleFeedback::MergeFrom(const ModuleFeedback& from) {
  GOOGLE_CHECK_NE(&from, this);
  accel_.MergeFrom(from.accel_);
  gyro_.MergeFrom(from.gyro_);
  compass_.MergeFrom(from.compass_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_velocity()) {
      set_velocity(from.velocity());
    }
    if (from.has_torque()) {
      set_torque(from.torque());
    }
    if (from.has_deflection()) {
      set_deflection(from.deflection());
    }
    if (from.has_motor_velocity()) {
      set_motor_velocity(from.motor_velocity());
    }
    if (from.has_deflection_velocity()) {
      set_deflection_velocity(from.deflection_velocity());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_motor_current()) {
      set_motor_current(from.motor_current());
    }
    if (from.has_module_current()) {
      set_module_current(from.module_current());
    }
    if (from.has_motor_temperature()) {
      set_motor_temperature(from.motor_temperature());
    }
    if (from.has_ambient_temperature()) {
      set_ambient_temperature(from.ambient_temperature());
    }
    if (from.has_processor_temperature()) {
      set_processor_temperature(from.processor_temperature());
    }
    if (from.has_actuator_temperature()) {
      set_actuator_temperature(from.actuator_temperature());
    }
    if (from.has_winding_temperature()) {
      set_winding_temperature(from.winding_temperature());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pressure()) {
      set_pressure(from.pressure());
    }
    if (from.has_voltage()) {
      set_voltage(from.voltage());
    }
    if (from.has_spring_constant()) {
      set_spring_constant(from.spring_constant());
    }
    if (from.has_position_target()) {
      set_position_target(from.position_target());
    }
    if (from.has_velocity_target()) {
      set_velocity_target(from.velocity_target());
    }
    if (from.has_torque_target()) {
      set_torque_target(from.torque_target());
    }
    if (from.has_inner_torque_target()) {
      set_inner_torque_target(from.inner_torque_target());
    }
    if (from.has_pwm_target()) {
      set_pwm_target(from.pwm_target());
    }
  }
}

void ModuleFeedback::CopyFrom(const ModuleFeedback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleFeedback::IsInitialized() const {

  return true;
}

void ModuleFeedback::Swap(ModuleFeedback* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(torque_, other->torque_);
    std::swap(deflection_, other->deflection_);
    std::swap(motor_velocity_, other->motor_velocity_);
    std::swap(deflection_velocity_, other->deflection_velocity_);
    accel_.Swap(&other->accel_);
    gyro_.Swap(&other->gyro_);
    compass_.Swap(&other->compass_);
    std::swap(motor_current_, other->motor_current_);
    std::swap(module_current_, other->module_current_);
    std::swap(motor_temperature_, other->motor_temperature_);
    std::swap(ambient_temperature_, other->ambient_temperature_);
    std::swap(processor_temperature_, other->processor_temperature_);
    std::swap(actuator_temperature_, other->actuator_temperature_);
    std::swap(winding_temperature_, other->winding_temperature_);
    std::swap(pressure_, other->pressure_);
    std::swap(voltage_, other->voltage_);
    std::swap(spring_constant_, other->spring_constant_);
    std::swap(position_target_, other->position_target_);
    std::swap(velocity_target_, other->velocity_target_);
    std::swap(torque_target_, other->torque_target_);
    std::swap(inner_torque_target_, other->inner_torque_target_);
    std::swap(pwm_target_, other->pwm_target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ModuleFeedback::GetTypeName() const {
  return "protos.ModuleFeedback";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

// @@protoc_insertion_point(global_scope)

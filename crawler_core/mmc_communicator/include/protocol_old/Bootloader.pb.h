// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Bootloader.proto

#ifndef PROTOBUF_Bootloader_2eproto__INCLUDED
#define PROTOBUF_Bootloader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace protos {
namespace bootloader {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Bootloader_2eproto();
void protobuf_AssignDesc_Bootloader_2eproto();
void protobuf_ShutdownFile_Bootloader_2eproto();

class Read;
class Write;
class Erase;
class BootloaderMessage;

enum Status {
  OK = 0,
  ERROR = 1,
  OUT_OF_RANGE = 2
};
bool Status_IsValid(int value);
const Status Status_MIN = OK;
const Status Status_MAX = OUT_OF_RANGE;
const int Status_ARRAYSIZE = Status_MAX + 1;

enum Partition {
  PARTITION_NONE = 0,
  PARTITION_APPLICATION = 1,
  PARTITION_DATABASE_1 = 2,
  PARTITION_DATABASE_2 = 3,
  PARTITION_BOOTLOADER = 4
};
bool Partition_IsValid(int value);
const Partition Partition_MIN = PARTITION_NONE;
const Partition Partition_MAX = PARTITION_BOOTLOADER;
const int Partition_ARRAYSIZE = Partition_MAX + 1;

// ===================================================================

class Read : public ::google::protobuf::MessageLite {
 public:
  Read();
  virtual ~Read();

  Read(const Read& from);

  inline Read& operator=(const Read& from) {
    CopyFrom(from);
    return *this;
  }

  static const Read& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Read* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Read* other);

  // implements Message ----------------------------------------------

  Read* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Read& from);
  void MergeFrom(const Read& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protos.bootloader.Partition partition = 1 [default = PARTITION_NONE];
  inline bool has_partition() const;
  inline void clear_partition();
  static const int kPartitionFieldNumber = 1;
  inline ::protos::bootloader::Partition partition() const;
  inline void set_partition(::protos::bootloader::Partition value);

  // optional uint32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // optional bytes data = 8;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 8;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional .protos.bootloader.Status status = 10;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 10;
  inline ::protos::bootloader::Status status() const;
  inline void set_status(::protos::bootloader::Status value);

  // optional string debug = 11;
  inline bool has_debug() const;
  inline void clear_debug();
  static const int kDebugFieldNumber = 11;
  inline const ::std::string& debug() const;
  inline void set_debug(const ::std::string& value);
  inline void set_debug(const char* value);
  inline void set_debug(const char* value, size_t size);
  inline ::std::string* mutable_debug();
  inline ::std::string* release_debug();
  inline void set_allocated_debug(::std::string* debug);

  // @@protoc_insertion_point(class_scope:protos.bootloader.Read)
 private:
  inline void set_has_partition();
  inline void clear_has_partition();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_debug();
  inline void clear_has_debug();

  int partition_;
  ::google::protobuf::uint32 offset_;
  ::std::string* data_;
  ::google::protobuf::uint32 length_;
  int status_;
  ::std::string* debug_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Bootloader_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Bootloader_2eproto();
  #endif
  friend void protobuf_AssignDesc_Bootloader_2eproto();
  friend void protobuf_ShutdownFile_Bootloader_2eproto();

  void InitAsDefaultInstance();
  static Read* default_instance_;
};
// -------------------------------------------------------------------

class Write : public ::google::protobuf::MessageLite {
 public:
  Write();
  virtual ~Write();

  Write(const Write& from);

  inline Write& operator=(const Write& from) {
    CopyFrom(from);
    return *this;
  }

  static const Write& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Write* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Write* other);

  // implements Message ----------------------------------------------

  Write* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Write& from);
  void MergeFrom(const Write& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sequence_number = 1;
  inline bool has_sequence_number() const;
  inline void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 sequence_number() const;
  inline void set_sequence_number(::google::protobuf::uint32 value);

  // optional uint32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 length = 3;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 3;
  inline ::google::protobuf::uint32 length() const;
  inline void set_length(::google::protobuf::uint32 value);

  // optional bool is_last_packet = 4;
  inline bool has_is_last_packet() const;
  inline void clear_is_last_packet();
  static const int kIsLastPacketFieldNumber = 4;
  inline bool is_last_packet() const;
  inline void set_is_last_packet(bool value);

  // optional bytes data = 8;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 8;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional .protos.bootloader.Status status = 10;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 10;
  inline ::protos::bootloader::Status status() const;
  inline void set_status(::protos::bootloader::Status value);

  // optional string debug = 11;
  inline bool has_debug() const;
  inline void clear_debug();
  static const int kDebugFieldNumber = 11;
  inline const ::std::string& debug() const;
  inline void set_debug(const ::std::string& value);
  inline void set_debug(const char* value);
  inline void set_debug(const char* value, size_t size);
  inline ::std::string* mutable_debug();
  inline ::std::string* release_debug();
  inline void set_allocated_debug(::std::string* debug);

  // @@protoc_insertion_point(class_scope:protos.bootloader.Write)
 private:
  inline void set_has_sequence_number();
  inline void clear_has_sequence_number();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_is_last_packet();
  inline void clear_has_is_last_packet();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_debug();
  inline void clear_has_debug();

  ::google::protobuf::uint32 sequence_number_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 length_;
  bool is_last_packet_;
  ::std::string* data_;
  ::std::string* debug_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Bootloader_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Bootloader_2eproto();
  #endif
  friend void protobuf_AssignDesc_Bootloader_2eproto();
  friend void protobuf_ShutdownFile_Bootloader_2eproto();

  void InitAsDefaultInstance();
  static Write* default_instance_;
};
// -------------------------------------------------------------------

class Erase : public ::google::protobuf::MessageLite {
 public:
  Erase();
  virtual ~Erase();

  Erase(const Erase& from);

  inline Erase& operator=(const Erase& from) {
    CopyFrom(from);
    return *this;
  }

  static const Erase& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Erase* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Erase* other);

  // implements Message ----------------------------------------------

  Erase* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Erase& from);
  void MergeFrom(const Erase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protos.bootloader.Partition partition = 1 [default = PARTITION_NONE];
  inline bool has_partition() const;
  inline void clear_partition();
  static const int kPartitionFieldNumber = 1;
  inline ::protos::bootloader::Partition partition() const;
  inline void set_partition(::protos::bootloader::Partition value);

  // optional .protos.bootloader.Status status = 10;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 10;
  inline ::protos::bootloader::Status status() const;
  inline void set_status(::protos::bootloader::Status value);

  // optional string debug = 11;
  inline bool has_debug() const;
  inline void clear_debug();
  static const int kDebugFieldNumber = 11;
  inline const ::std::string& debug() const;
  inline void set_debug(const ::std::string& value);
  inline void set_debug(const char* value);
  inline void set_debug(const char* value, size_t size);
  inline ::std::string* mutable_debug();
  inline ::std::string* release_debug();
  inline void set_allocated_debug(::std::string* debug);

  // @@protoc_insertion_point(class_scope:protos.bootloader.Erase)
 private:
  inline void set_has_partition();
  inline void clear_has_partition();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_debug();
  inline void clear_has_debug();

  int partition_;
  int status_;
  ::std::string* debug_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Bootloader_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Bootloader_2eproto();
  #endif
  friend void protobuf_AssignDesc_Bootloader_2eproto();
  friend void protobuf_ShutdownFile_Bootloader_2eproto();

  void InitAsDefaultInstance();
  static Erase* default_instance_;
};
// -------------------------------------------------------------------

class BootloaderMessage : public ::google::protobuf::MessageLite {
 public:
  BootloaderMessage();
  virtual ~BootloaderMessage();

  BootloaderMessage(const BootloaderMessage& from);

  inline BootloaderMessage& operator=(const BootloaderMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const BootloaderMessage& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BootloaderMessage* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BootloaderMessage* other);

  // implements Message ----------------------------------------------

  BootloaderMessage* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BootloaderMessage& from);
  void MergeFrom(const BootloaderMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protos.bootloader.Read read = 1;
  inline bool has_read() const;
  inline void clear_read();
  static const int kReadFieldNumber = 1;
  inline const ::protos::bootloader::Read& read() const;
  inline ::protos::bootloader::Read* mutable_read();
  inline ::protos::bootloader::Read* release_read();
  inline void set_allocated_read(::protos::bootloader::Read* read);

  // optional .protos.bootloader.Write write = 2;
  inline bool has_write() const;
  inline void clear_write();
  static const int kWriteFieldNumber = 2;
  inline const ::protos::bootloader::Write& write() const;
  inline ::protos::bootloader::Write* mutable_write();
  inline ::protos::bootloader::Write* release_write();
  inline void set_allocated_write(::protos::bootloader::Write* write);

  // optional .protos.bootloader.Erase erase = 3;
  inline bool has_erase() const;
  inline void clear_erase();
  static const int kEraseFieldNumber = 3;
  inline const ::protos::bootloader::Erase& erase() const;
  inline ::protos::bootloader::Erase* mutable_erase();
  inline ::protos::bootloader::Erase* release_erase();
  inline void set_allocated_erase(::protos::bootloader::Erase* erase);

  // optional bool boot_request = 10;
  inline bool has_boot_request() const;
  inline void clear_boot_request();
  static const int kBootRequestFieldNumber = 10;
  inline bool boot_request() const;
  inline void set_boot_request(bool value);

  // @@protoc_insertion_point(class_scope:protos.bootloader.BootloaderMessage)
 private:
  inline void set_has_read();
  inline void clear_has_read();
  inline void set_has_write();
  inline void clear_has_write();
  inline void set_has_erase();
  inline void clear_has_erase();
  inline void set_has_boot_request();
  inline void clear_has_boot_request();

  ::protos::bootloader::Read* read_;
  ::protos::bootloader::Write* write_;
  ::protos::bootloader::Erase* erase_;
  bool boot_request_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_Bootloader_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_Bootloader_2eproto();
  #endif
  friend void protobuf_AssignDesc_Bootloader_2eproto();
  friend void protobuf_ShutdownFile_Bootloader_2eproto();

  void InitAsDefaultInstance();
  static BootloaderMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// Read

// optional .protos.bootloader.Partition partition = 1 [default = PARTITION_NONE];
inline bool Read::has_partition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Read::set_has_partition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Read::clear_has_partition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Read::clear_partition() {
  partition_ = 0;
  clear_has_partition();
}
inline ::protos::bootloader::Partition Read::partition() const {
  return static_cast< ::protos::bootloader::Partition >(partition_);
}
inline void Read::set_partition(::protos::bootloader::Partition value) {
  assert(::protos::bootloader::Partition_IsValid(value));
  set_has_partition();
  partition_ = value;
}

// optional uint32 offset = 2;
inline bool Read::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Read::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Read::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Read::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 Read::offset() const {
  return offset_;
}
inline void Read::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
}

// optional uint32 length = 3;
inline bool Read::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Read::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Read::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Read::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 Read::length() const {
  return length_;
}
inline void Read::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// optional bytes data = 8;
inline bool Read::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Read::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Read::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Read::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Read::data() const {
  return *data_;
}
inline void Read::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Read::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Read::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Read::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Read::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Read::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .protos.bootloader.Status status = 10;
inline bool Read::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Read::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Read::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Read::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::protos::bootloader::Status Read::status() const {
  return static_cast< ::protos::bootloader::Status >(status_);
}
inline void Read::set_status(::protos::bootloader::Status value) {
  assert(::protos::bootloader::Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional string debug = 11;
inline bool Read::has_debug() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Read::set_has_debug() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Read::clear_has_debug() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Read::clear_debug() {
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    debug_->clear();
  }
  clear_has_debug();
}
inline const ::std::string& Read::debug() const {
  return *debug_;
}
inline void Read::set_debug(const ::std::string& value) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(value);
}
inline void Read::set_debug(const char* value) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(value);
}
inline void Read::set_debug(const char* value, size_t size) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Read::mutable_debug() {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  return debug_;
}
inline ::std::string* Read::release_debug() {
  clear_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_;
    debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Read::set_allocated_debug(::std::string* debug) {
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_;
  }
  if (debug) {
    set_has_debug();
    debug_ = debug;
  } else {
    clear_has_debug();
    debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Write

// optional uint32 sequence_number = 1;
inline bool Write::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Write::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Write::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Write::clear_sequence_number() {
  sequence_number_ = 0u;
  clear_has_sequence_number();
}
inline ::google::protobuf::uint32 Write::sequence_number() const {
  return sequence_number_;
}
inline void Write::set_sequence_number(::google::protobuf::uint32 value) {
  set_has_sequence_number();
  sequence_number_ = value;
}

// optional uint32 offset = 2;
inline bool Write::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Write::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Write::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Write::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 Write::offset() const {
  return offset_;
}
inline void Write::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
}

// optional uint32 length = 3;
inline bool Write::has_length() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Write::set_has_length() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Write::clear_has_length() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Write::clear_length() {
  length_ = 0u;
  clear_has_length();
}
inline ::google::protobuf::uint32 Write::length() const {
  return length_;
}
inline void Write::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
}

// optional bool is_last_packet = 4;
inline bool Write::has_is_last_packet() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Write::set_has_is_last_packet() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Write::clear_has_is_last_packet() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Write::clear_is_last_packet() {
  is_last_packet_ = false;
  clear_has_is_last_packet();
}
inline bool Write::is_last_packet() const {
  return is_last_packet_;
}
inline void Write::set_is_last_packet(bool value) {
  set_has_is_last_packet();
  is_last_packet_ = value;
}

// optional bytes data = 8;
inline bool Write::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Write::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Write::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Write::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Write::data() const {
  return *data_;
}
inline void Write::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Write::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Write::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Write::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Write::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Write::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .protos.bootloader.Status status = 10;
inline bool Write::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Write::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Write::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Write::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::protos::bootloader::Status Write::status() const {
  return static_cast< ::protos::bootloader::Status >(status_);
}
inline void Write::set_status(::protos::bootloader::Status value) {
  assert(::protos::bootloader::Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional string debug = 11;
inline bool Write::has_debug() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Write::set_has_debug() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Write::clear_has_debug() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Write::clear_debug() {
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    debug_->clear();
  }
  clear_has_debug();
}
inline const ::std::string& Write::debug() const {
  return *debug_;
}
inline void Write::set_debug(const ::std::string& value) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(value);
}
inline void Write::set_debug(const char* value) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(value);
}
inline void Write::set_debug(const char* value, size_t size) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Write::mutable_debug() {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  return debug_;
}
inline ::std::string* Write::release_debug() {
  clear_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_;
    debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Write::set_allocated_debug(::std::string* debug) {
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_;
  }
  if (debug) {
    set_has_debug();
    debug_ = debug;
  } else {
    clear_has_debug();
    debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Erase

// optional .protos.bootloader.Partition partition = 1 [default = PARTITION_NONE];
inline bool Erase::has_partition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Erase::set_has_partition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Erase::clear_has_partition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Erase::clear_partition() {
  partition_ = 0;
  clear_has_partition();
}
inline ::protos::bootloader::Partition Erase::partition() const {
  return static_cast< ::protos::bootloader::Partition >(partition_);
}
inline void Erase::set_partition(::protos::bootloader::Partition value) {
  assert(::protos::bootloader::Partition_IsValid(value));
  set_has_partition();
  partition_ = value;
}

// optional .protos.bootloader.Status status = 10;
inline bool Erase::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Erase::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Erase::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Erase::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::protos::bootloader::Status Erase::status() const {
  return static_cast< ::protos::bootloader::Status >(status_);
}
inline void Erase::set_status(::protos::bootloader::Status value) {
  assert(::protos::bootloader::Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional string debug = 11;
inline bool Erase::has_debug() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Erase::set_has_debug() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Erase::clear_has_debug() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Erase::clear_debug() {
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    debug_->clear();
  }
  clear_has_debug();
}
inline const ::std::string& Erase::debug() const {
  return *debug_;
}
inline void Erase::set_debug(const ::std::string& value) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(value);
}
inline void Erase::set_debug(const char* value) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(value);
}
inline void Erase::set_debug(const char* value, size_t size) {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  debug_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Erase::mutable_debug() {
  set_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    debug_ = new ::std::string;
  }
  return debug_;
}
inline ::std::string* Erase::release_debug() {
  clear_has_debug();
  if (debug_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = debug_;
    debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Erase::set_allocated_debug(::std::string* debug) {
  if (debug_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_;
  }
  if (debug) {
    set_has_debug();
    debug_ = debug;
  } else {
    clear_has_debug();
    debug_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// BootloaderMessage

// optional .protos.bootloader.Read read = 1;
inline bool BootloaderMessage::has_read() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BootloaderMessage::set_has_read() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BootloaderMessage::clear_has_read() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BootloaderMessage::clear_read() {
  if (read_ != NULL) read_->::protos::bootloader::Read::Clear();
  clear_has_read();
}
inline const ::protos::bootloader::Read& BootloaderMessage::read() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return read_ != NULL ? *read_ : *default_instance().read_;
#else
  return read_ != NULL ? *read_ : *default_instance_->read_;
#endif
}
inline ::protos::bootloader::Read* BootloaderMessage::mutable_read() {
  set_has_read();
  if (read_ == NULL) read_ = new ::protos::bootloader::Read;
  return read_;
}
inline ::protos::bootloader::Read* BootloaderMessage::release_read() {
  clear_has_read();
  ::protos::bootloader::Read* temp = read_;
  read_ = NULL;
  return temp;
}
inline void BootloaderMessage::set_allocated_read(::protos::bootloader::Read* read) {
  delete read_;
  read_ = read;
  if (read) {
    set_has_read();
  } else {
    clear_has_read();
  }
}

// optional .protos.bootloader.Write write = 2;
inline bool BootloaderMessage::has_write() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BootloaderMessage::set_has_write() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BootloaderMessage::clear_has_write() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BootloaderMessage::clear_write() {
  if (write_ != NULL) write_->::protos::bootloader::Write::Clear();
  clear_has_write();
}
inline const ::protos::bootloader::Write& BootloaderMessage::write() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return write_ != NULL ? *write_ : *default_instance().write_;
#else
  return write_ != NULL ? *write_ : *default_instance_->write_;
#endif
}
inline ::protos::bootloader::Write* BootloaderMessage::mutable_write() {
  set_has_write();
  if (write_ == NULL) write_ = new ::protos::bootloader::Write;
  return write_;
}
inline ::protos::bootloader::Write* BootloaderMessage::release_write() {
  clear_has_write();
  ::protos::bootloader::Write* temp = write_;
  write_ = NULL;
  return temp;
}
inline void BootloaderMessage::set_allocated_write(::protos::bootloader::Write* write) {
  delete write_;
  write_ = write;
  if (write) {
    set_has_write();
  } else {
    clear_has_write();
  }
}

// optional .protos.bootloader.Erase erase = 3;
inline bool BootloaderMessage::has_erase() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BootloaderMessage::set_has_erase() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BootloaderMessage::clear_has_erase() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BootloaderMessage::clear_erase() {
  if (erase_ != NULL) erase_->::protos::bootloader::Erase::Clear();
  clear_has_erase();
}
inline const ::protos::bootloader::Erase& BootloaderMessage::erase() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return erase_ != NULL ? *erase_ : *default_instance().erase_;
#else
  return erase_ != NULL ? *erase_ : *default_instance_->erase_;
#endif
}
inline ::protos::bootloader::Erase* BootloaderMessage::mutable_erase() {
  set_has_erase();
  if (erase_ == NULL) erase_ = new ::protos::bootloader::Erase;
  return erase_;
}
inline ::protos::bootloader::Erase* BootloaderMessage::release_erase() {
  clear_has_erase();
  ::protos::bootloader::Erase* temp = erase_;
  erase_ = NULL;
  return temp;
}
inline void BootloaderMessage::set_allocated_erase(::protos::bootloader::Erase* erase) {
  delete erase_;
  erase_ = erase;
  if (erase) {
    set_has_erase();
  } else {
    clear_has_erase();
  }
}

// optional bool boot_request = 10;
inline bool BootloaderMessage::has_boot_request() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BootloaderMessage::set_has_boot_request() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BootloaderMessage::clear_has_boot_request() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BootloaderMessage::clear_boot_request() {
  boot_request_ = false;
  clear_has_boot_request();
}
inline bool BootloaderMessage::boot_request() const {
  return boot_request_;
}
inline void BootloaderMessage::set_boot_request(bool value) {
  set_has_boot_request();
  boot_request_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bootloader
}  // namespace protos

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Bootloader_2eproto__INCLUDED
